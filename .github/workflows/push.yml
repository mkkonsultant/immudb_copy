name: pushCI

env:
  GO_VERSION: "1.18"
  MIN_SUPPORTED_GO_VERSION: "1.15"

on:
  push:
    branches:
      - master
      - release/v*
    tags:
      - 'v*'

jobs:

  old-go:
    name: Ensure immudb compiles with the oldest supported go version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.MIN_SUPPORTED_GO_VERSION }}
      - uses: actions/checkout@v3
      - run: make all

  gosec:
    runs-on: ubuntu-latest
    env:
      JOB_NAME: ${{ github.job }}
      JOB_ID: ${{ github.run_id }}
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3
      - run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sudo sh -s -- -b $GOPATH/bin latest
          gosec -fmt=json -out=results-$JOB_ID.json -no-fail ./...

  binaries:
      name: Build binaries and notarize sources
      needs:
        - gosec
        - old-go
      runs-on: ubuntu-latest
      env:
        JOB_NAME: ${{ github.job }}
        JOB_ID: ${{ github.run_id }}
        MY_APP_ROOT: $(pwd)
      outputs:
        matrix: ${{ steps.list-binaries.outputs.matrix }}
      steps:
        - uses: actions/setup-go@v3
          with:
            go-version: ${{ env.GO_VERSION }}
        - uses: actions/checkout@v3
        - id: list-binaries
          run: |
            echo "matrix=$(ls dist | jq -R -s -c 'split("\n")[:-1] | {binary: .}')" >> $GITHUB_OUTPUT
        - id: list-current-dir
          run: |
            ls ${{ MY_APP_ROOT }}
        - name: Upload binary artifacts
          uses: actions/upload-artifact@v3
          with:
            name: immudb-binaries
            path: dist
            retention-days: 5
        - name: Manifest Generation
          run: |
            export BILLY_SERVER=https://billy.codesec.aquasec.com
            curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
            curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
            if ! cat install.sh.checksum | sha256sum ; then
            echo "install.sh checksum failed"
            exit 1
            fi
            BINDIR="." sh install.sh
            rm install.sh install.sh.checksum
            ./billy generate \
            --access-token "${{ secrets.GITHUB_TOKEN }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --artifact-path "${{ env.MY_APP_ROOT }}" 

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            # --artifact-path "${{env.MY_APP_ROOT}}"
